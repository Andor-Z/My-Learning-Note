[TOC]  
廖雪峰Python3教程--函数式编程  
#7.函数式编程（Functional Programming）
纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。

函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！

Python对函数式编程提供部分支持。

##7.1高阶函数Higher-order function  
###7.1.1 map/reduce  
###7.1.2 filter
'filter()'接收一个函数和一个序列，把传入的函数依次作用于每个元素，然后根据返回值是'True'还是'False'决定去流。

###7.1.3 sorted
高阶函数
关键字`key`  `reverse = True False`

##7.2 返回函数
闭包 嵌套了函数，暂时用不到这么高级的内容，有部分不太理解

一个函数可以返回一个计算结果，也可以返回一个函数。

返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。

#7.3 匿名函数 `lambda`

计算 `f(x) = x^2` 

匿名函数
`list(map(lambda x: x*x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))`

`lambda x: x*x` 实际上是
```
def f(x):
	return x *x
```

a = [x*x for x in range(1,10)]
print(a)

- 函数式编程中很多高阶函数只是一带而过

#8 模块

##8.1 使用模块

`__name__` 
当我们在命令行运行Py文件时，python解释器把一个特殊变量`__name__`置为`__main__`

- 作用域 
python中通过前缀`_`实现作用域
可以直接引用的 public 公开变量 

`__xxx__`特殊变量，可以被直接引用，但是一般是有特殊用途，如 __author__        __name__  __doc__

`_xxx` `__xxx`非公开函数private 不应该被直接引用， 但是可以引用，从编程习惯上不应该引用private函数或者变量

##8.2 安装第三方模块














